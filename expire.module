<?php

/**
 * @file
 * Provides logic for page cache expiration.
 */

/**
 * Constant definitions.
 */

// Node actions.
define('EXPIRE_NODE_INSERT', 1);
define('EXPIRE_NODE_UPDATE', 2);
define('EXPIRE_NODE_DELETE', 3);

// Comment actions.
define('EXPIRE_COMMENT_INSERT'   , 1);
define('EXPIRE_COMMENT_UPDATE'   , 2);
define('EXPIRE_COMMENT_DELETE'   , 3);
define('EXPIRE_COMMENT_PUBLISH'  , 4);
define('EXPIRE_COMMENT_UNPUBLISH', 5);

// User actions.
define('EXPIRE_USER_INSERT', 1);
define('EXPIRE_USER_UPDATE', 2);
define('EXPIRE_USER_DELETE', 3);
define('EXPIRE_USER_CANCEL', 4);

// VotingAPI actions.
define('EXPIRE_VOTINGAPI_INSERT', 1);
define('EXPIRE_VOTINGAPI_DELETE', 2);

// Default values for cache expirations.
define('EXPIRE_NODE_FRONT_PAGE'             , FALSE);
define('EXPIRE_NODE_NODE_PAGE'              , TRUE);
define('EXPIRE_NODE_TERM_PAGES'             , FALSE);
define('EXPIRE_NODE_REFERENCE_PAGES'        , FALSE);
define('EXPIRE_NODE_CUSTOM'                 , FALSE);
define('EXPIRE_COMMENT_FRONT_PAGE'          , FALSE);
define('EXPIRE_COMMENT_COMMENT_PAGE'        , TRUE);
define('EXPIRE_COMMENT_NODE_PAGE'           , TRUE);
define('EXPIRE_COMMENT_NODE_TERM_PAGES'     , FALSE);
define('EXPIRE_COMMENT_NODE_REFERENCE_PAGES', FALSE);
define('EXPIRE_COMMENT_CUSTOM'              , FALSE);
define('EXPIRE_USER_FRONT_PAGE'             , FALSE);
define('EXPIRE_USER_USER_PAGE'              , TRUE);
define('EXPIRE_USER_CUSTOM'                 , FALSE);

/**
 * Implementation of hook_menu().
 */
function expire_menu() {

  $items['admin/config/development/performance/default'] = array(
    'title'             => 'Performance',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'file path'         => drupal_get_path('module', 'system'),
    'weight'            => -5,
  );

  $items['admin/config/development/performance/expire'] = array(
    'type'              => MENU_LOCAL_TASK,
    'title'             => 'Cache Expiration',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('expire_admin_settings_form'),
    'access arguments'  => array('administer site configuration'),
    'file'              => 'expire.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function expire_form_node_type_form_alter(&$form, &$form_state) {
  module_load_include('admin.inc', 'expire');
  expire_node_settings_form($form, $form_state);
}

/**
 * Implements hook_node_insert().
 */
function expire_node_insert($node) {
  $handler = expire_get_expiration_handler('node');
  expire_execute_expiration_handler($handler, $node, EXPIRE_NODE_INSERT);
}

/**
 * Implements hook_node_update().
 */
function expire_node_update($node) {
  $handler = expire_get_expiration_handler('node');
  expire_execute_expiration_handler($handler, $node, EXPIRE_NODE_UPDATE);
}

/**
 * Implements hook_node_delete().
 */
function expire_node_delete($node) {
  $handler = expire_get_expiration_handler('node');
  expire_execute_expiration_handler($handler, $node, EXPIRE_NODE_DELETE);
}

/**
 * Implements hook_comment_insert().
 */
function expire_comment_insert($comment) {
  $handler = expire_get_expiration_handler('comment');
  expire_execute_expiration_handler($handler, $comment, EXPIRE_COMMENT_INSERT);
}

/**
 * Implements hook_comment_update().
 */
function expire_comment_update($comment) {
  $handler = expire_get_expiration_handler('comment');
  expire_execute_expiration_handler($handler, $comment, EXPIRE_COMMENT_UPDATE);
}

/**
 * Implements hook_comment_delete().
 */
function expire_comment_delete($comment) {
  $handler = expire_get_expiration_handler('comment');
  expire_execute_expiration_handler($handler, $comment, EXPIRE_COMMENT_DELETE);
}

/**
 * Implements hook_comment_publish().
 */
function expire_comment_publish($comment) {
  $handler = expire_get_expiration_handler('comment');
  expire_execute_expiration_handler($handler, $comment, EXPIRE_COMMENT_PUBLISH);
}

/**
 * Implements hook_comment_unpublish().
 */
function expire_comment_unpublish($comment) {
  $handler = expire_get_expiration_handler('comment');
  expire_execute_expiration_handler($handler, $comment, EXPIRE_COMMENT_UNPUBLISH);
}

/**
 * Implements hook_user_insert().
 */
function expire_user_insert($account) {
  $handler = expire_get_expiration_handler('user');
  expire_execute_expiration_handler($handler, $account, EXPIRE_USER_INSERT);
}

/**
 * Implements hook_user_update().
 */
function expire_user_update(&$edit, $account) {
  $handler = expire_get_expiration_handler('user');
  expire_execute_expiration_handler($handler, $account, EXPIRE_USER_UPDATE);
}

/**
 * Implements hook_user_delete().
 */
function expire_user_delete($account) {
  $handler = expire_get_expiration_handler('user');
  expire_execute_expiration_handler($handler, $account, EXPIRE_USER_DELETE);
}

/**
 * Implements hook_user_cancel().
 */
function expire_user_cancel($account) {
  $handler = expire_get_expiration_handler('user');
  expire_execute_expiration_handler($handler, $account, EXPIRE_USER_CANCEL);
}

/**
 * Implements hook_votingapi_insert().
 */
function expire_votingapi_insert($votes) {
  // @todo: implement.
  $handler = expire_get_expiration_handler('votingapi');
  expire_execute_expiration_handler($handler, $votes, EXPIRE_VOTINGAPI_INSERT);
}

/**
 * Implements hook_votingapi_delete().
 */
function expire_votingapi_delete($votes) {
  // @todo: implement.
  $handler = expire_get_expiration_handler('votingapi');
  expire_execute_expiration_handler($handler, $votes, EXPIRE_VOTINGAPI_DELETE);
}

/**
 * Return name of static class that will
 * handle cache expiration for object of a given type.
 */
function expire_get_expiration_handler($type) {
  $class = variable_get('expire_handler_' . $type, 'Expire' . drupal_ucfirst($type));
  if (class_exists($class)) {
    $interfaces = class_implements($class);
    if (in_array('ExpireInterface', $interfaces)) {
      return $class;
    }
  }
  return FALSE;
}

/**
 * Execute expiration method for object.
 */
function expire_execute_expiration_handler($handler) {

  if (empty($handler)) {
    return;
  }

  $args = func_get_args();
  unset($args[0]);
  call_user_func_array($handler::expire, $args);
}
